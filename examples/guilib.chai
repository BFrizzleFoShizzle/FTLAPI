// ChaiScript GUI helper library

class Point {
	// consider extending POINT and adding helper methods,
	// or do that on the C++ side
	var x;
	var y;
	def Point(x,y) {
		this.x = x;
		this.y = y;
	}
}

class Window
{
	var x;
	var y;
	var w;
	var h;
	var padding;
	var lastCursor;
	var dragging;
	var children;
	var barHeight;
	var title;

	// constructor
	def Window(x,y,w,h)
	{
		this.barHeight = 16;
		this.padding = 2;
		this.x = x;
		this.y = y;
		this.w = w;
		this.h = this.padding*2;
		this.title = "";
		this.dragging = false;
		this.children := Vector();
		EventsLib.addMouseDownListener(this);
		EventsLib.addMouseUpListener(this);
		EventsLib.addDrawListener(this);
	}
	
	def addChild(obj) {
		obj.x = this.x+this.padding;
		if(this.children.size() == 0) {
			obj.y = this.y+this.padding;
		} else {
			obj.y = this.children.back().y+this.children.back().h+this.padding;
		}
		obj.w = this.w-this.padding*2;
		this.h += obj.h+this.padding;
		this.children.push_back_ref(obj);
	}

	def update() {
		var cursor = getCursorPos();
		if(this.dragging) {
			this.x += cursor.x-this.lastCursor.x;
			this.y += cursor.y-this.lastCursor.y;
			// update children
			var range = range(this.children);
			while (!range.empty())
			{
				// update child
				var child := range.front();
				child.x += cursor.x-this.lastCursor.x;
				child.y += cursor.y-this.lastCursor.y;
				range.pop_front()
			}
		}
		this.lastCursor := cursor;
	}
	
	def onMouseDown() {
		var cursor = getCursorPos();
		if(this.withinBar(cursor.x, cursor.y)) {
			this.lastCursor := cursor;
			this.dragging = true;
		}
	}

	def onMouseUp() {
		this.dragging = false;
	}

	def withinBounds(x,y){
		return x>this.x&&y>this.y&&x<this.x+this.w&&y<this.y+this.h;
	}

	def withinBar(x,y){
		return x>this.x&&y>this.y-this.barHeight&&x<this.x+this.w&&y<this.y;
	}
	
	// method
	def onDraw()
	{
		// maybe move somewhere more appropriate
		this.update();
		setColor(0.4,0.4,0.4,0.8);
		drawRect(this.x,this.y-this.barHeight,this.w,this.barHeight);
		setColor(0.8,0.8,0.8,0.8);
		drawRect(this.x,this.y,this.w,this.h);
		setColor(1,1,1,0.8);
		drawString(this.x+this.padding,this.y-this.barHeight+this.padding,this.title);
	}
	
}

class TextBox
{
	var x;
	var y;
	var w;
	var h;
	var text;
	var cursor;
	var lastUpdate;
	var charWidth;
	var lineSpacing;
	var onEnter;
	var active;
	var input;

	// constructor
	def TextBox(x,y,w,h,text)
	{
		this.x = x;
		this.y = y;
		this.w = w;
		this.h = h;
		this.charWidth = 8;
		this.lineSpacing = 2;
		this.text = text;
		this.cursor = 0;
		this.offset = 0;
		this.cursorFlashTime = 0.5;
		this.lastUpdate = getTicks();
		this.active = false;
		this.input = false;
		EventsLib.addTextInputListener(this);
		EventsLib.addKeyDownListener(this);
		EventsLib.addMouseDownListener(this);
		EventsLib.addDrawListener(this);
	}

	// text input
	def onTextInput(key) {
		if(!this.input || !this.active) {
			return;
		}
		// backspace
		if (key == 8) {
			if(this.cursor != 0) {
				this.text = this.text.substr(0,this.cursor-1)+this.text.substr(this.cursor,this.text.size());
				--this.cursor;
			}
		}
		// delete
		else if (key == 127) {
			if(this.text.size() > this.cursor) {
				this.text = this.text.substr(0,this.cursor)+this.text.substr(this.cursor+1,this.text.size());
			}
		}
		// enter
		else if (key == 13) {
			this.onEnter(this);
		}
		else {
			this.lastUpdate = getTicks();
			// insert char at cursor
			this.text = this.text.substr(0,this.cursor)+to_string(char(key))+this.text.substr(this.cursor,this.text.size());
			++this.cursor;
		}
	}

	def onKeyDown(key) {
		// don't process if not active
		if(!this.active) {
			return;
		}
		// up
		if(key == 273) {
			
		} 
		// down
		else if(key == 274 && this.cursor != this.text.size()) {
			var charsPerRow = int(this.w/this.charWidth);
			var row = 0;
			var rowStart = 0;
			// start and end of row with cursor;
			for(var i=this.offset;i<this.text.size();++row) {
				// get our line
				rowStart = i;
				i = this.getNextLineOffset(i);
				if(this.cursor>=rowStart && this.cursor<i) {
					break;
				}
			}
			// get 
			var nextLineStart = this.getNextLineOffset(this.cursor);
			var nextLineEnd = this.getNextLineOffset(nextLineStart)-1;
			this.cursor = min(nextLineStart+(this.cursor-rowStart),nextLineEnd);
			// finally, scroll down if needed
			if(row>this.h/this.charWidth) {
				this.offset = this.getNextLineOffset(this.offset);
			}
		}
		// right
		else if(key == 275 && this.cursor<this.text.size()) {
			++this.cursor;
			this.lastUpdate = getTicks();
			if(!this.offsetWithinDisplay(this.cursor)) {
				this.offset = this.getNextLineOffset(this.offset);
			}
		}
		// left
		else if(key == 276 && this.cursor != 0) {
			--this.cursor;
			this.lastUpdate = getTicks();
			if(this.cursor<this.offset) {
				this.offset = this.getPreviousLineOffset(this.offset);
			}
		}
	}

	// raturns index of first char of next line
	def getNextLineOffset(offset) {
		if(offset >= this.text.size()) {
			return this.text.size()+1;
		}
		var charsPerRow = int(this.w/this.charWidth);
		var newLine = this.text.substr(offset,charsPerRow).find("\n");
		if(newLine == -1) {
			if(offset+charsPerRow<this.text.size()+1) {
				return offset+charsPerRow;
			} else {
				return this.text.size()+1;
			}
		} else {
			return offset+newLine+1;
		}
	}

	// returns index of first char of previous line
	def getPreviousLineOffset(offset) {
		if(offset <= 0) {
			return 0;
		}
		var charsPerRow = int(this.w/this.charWidth);
		// check if previous line contains an endline
		var prevHardLineStart = max((offset-1)-charsPerRow,0);
		var newLine = this.text.substr(prevHardLineStart,min(charsPerRow,offset-1)).find_last_of("\n");
		if(newLine == -1) {
			// if the previous row does not contain an endline, subtract one, or set offset to 0
			if(offset-charsPerRow>0) {
				return offset-charsPerRow;
			} else {
				return 0;
			}
		} else {
			// Previous line contains a newline, change to the beginning of the line
			return (prevHardLineStart+newLine+1);
		}
	}
	
	def onMouseDown() {
		var cursor = getCursorPos();
		if(this.withinBounds(cursor.x, cursor.y)) {
			this.active = true;
		} else {
			this.active = false;
		}
	}

	def onMouseUp() {
		
	}


	def offsetWithinDisplay(offset) {
		var charsPerRow = int(this.w/this.charWidth);
		var row = 0;
		var rowStart = 0;
		// start and end of row with cursor;
		for(var i=this.offset;i<this.text.size() && row<this.getMaxRows();++row) {
			// get our line
			rowStart = i;
			i = this.getNextLineOffset(i);
			if(offset>=rowStart && offset<i) {
				return true;
			}
		}
		return false;
	}

	// update this if you ever add padding
	def getMaxRows() {
		return int(this.h/this.charWidth);
	}

	def withinBounds(x,y){
		return x>this.x&&y>this.y&&x<this.x+this.w&&y<this.y+this.h;
	}
	
	// method
	def onDraw()
	{
		//TODO: add newline support
		setColor(1,1,1,0.8);
		var charsPerRow = int(this.w/this.charWidth);
		// always at least 1 row
		var rows = (this.text.size()/charsPerRow)+1;
		// height bounds check
		if(rows>this.h*this.charWidth) {
			rows = int(h/this.charWidth);
		}
		// draw each row of text
		var row = 0;
		var oldPos;
		for(var i=this.offset;i<this.text.size();++row) {
			// for checking whether cursor is in the line
			oldPos = i;
			// get our line
			var text = this.text.substr(i, charsPerRow);
			if(text.contains('\n')) {
				text = text.substr(0,text.find("\n"));
				++i;
			}
			drawString(this.x, this.y+row*this.charWidth, text);
			i += text.size();
			// draw cursor if it's in the line
			// TODO: refactor
			if(this.input && this.active && this.cursor>=oldPos && this.cursor<i) {
				// check flash time
				var timeElapsed = float(getTicks()-this.lastUpdate)/1000;
				if(int(timeElapsed/this.cursorFlashTime)%2==0) {
					var cursorPos = this.cursor-oldPos;
					drawRect(this.x+cursorPos*this.charWidth,this.y+row*this.charWidth,2,this.charWidth);
				}
			}
		}
		// draw cursor if it's at the end
		if(this.input && this.active && this.cursor == this.text.size()) {
			// check flash time
			var timeElapsed = float(getTicks()-this.lastUpdate)/1000;
			if(int(timeElapsed/this.cursorFlashTime)%2==0) {
				// check last char for endline
				if(this.text.size() == 0 || this.text.substr(this.text.size()-1,1) == "\n") {
					var cursorPos = 0;
					drawRect(this.x+cursorPos*this.charWidth,this.y+row*this.charWidth,2,this.charWidth);
				} else {
					var cursorPos = this.cursor-oldPos;
					drawRect(this.x+cursorPos*this.charWidth,this.y+(row-1)*this.charWidth,2,this.charWidth);
				}
			}
		}
	}
}

